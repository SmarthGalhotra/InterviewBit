/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
ListNode* isThereACycle(ListNode *head){
    ListNode* slow = head;
    ListNode* fast = head;
    while(fast != NULL && fast->next == NULL){
        slow = slow->next;
        fast = fast->next->next;
        if(slow == fast){
            return slow;
        }
    }
    return NULL;
} 
 
ListNode* Solution::detectCycle(ListNode* A) {
    ListNode *fast = isThereACycle(A);
    if(fast == NULL) return NULL;
    ListNode* slow = A;
    while(slow !=  fast){
        slow= slow->next;
        fast = fast->next;
    }
    return slow;
    
}
