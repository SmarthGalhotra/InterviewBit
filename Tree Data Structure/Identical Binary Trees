/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 
 
 
  /**
   * Solution 1 -- using level order traversal
   
  
 int levelOrderTraversal(TreeNode* A, TreeNode* B){
     if(A == NULL && B == NULL) return 1;
     queue<TreeNode*> q_one;
     queue<TreeNode*> q_two;
     
     q_one.push(A);
     q_two.push(B);
     
     while(q_one.empty()==false && q_two.empty()==false){
         TreeNode* node_one = q_one.front();
         TreeNode* node_two = q_two.front();
         
         if(node_one->val != node_two->val) return 0;
         
         int q_one_size = q_one.size();
         int q_two_size = q_two.size();
         
         if(q_one_size !=q_two_size ) return 0;
         
         for(int i=0; i<q_one_size; i++){
             TreeNode* temp_one = q_one.front();
             TreeNode* temp_two = q_two.front();
             
             if(temp_one->val != temp_two->val) return 0;
             
             if(temp_one->left!=NULL && temp_two->left!=NULL){
                 q_one.push(temp_one->left);
                 q_two.push(temp_two->left);
             } 
             else if((temp_one->left!=NULL && temp_two->left==NULL) || (temp_one->left==NULL && temp_two->left!=NULL)){
                return 0;
             }
             
             if(temp_one->right!=NULL && temp_two->right!=NULL){
                 q_one.push(temp_one->right);
                 q_two.push(temp_two->right);
             } 
             else if((temp_one->right!=NULL && temp_two->right==NULL) || (temp_one->right==NULL && temp_two->right!=NULL)){
                return 0;
             }
             
             q_one.pop(); 
             q_two.pop();
         }
     }
     return 1;
 }
 
 
int Solution::isSameTree(TreeNode* A, TreeNode* B) {
    int ans = levelOrderTraversal(A,B);
    return ans;
}
**/


int Solution::isSameTree(TreeNode* A, TreeNode* B){
            if (A == NULL && B == NULL) return 1;
            if (A == NULL || B == NULL) return 0;
            return ((A->val == B->val) && isSameTree(A->left, B->left) && isSameTree(A->right, B->right)); 
        }
